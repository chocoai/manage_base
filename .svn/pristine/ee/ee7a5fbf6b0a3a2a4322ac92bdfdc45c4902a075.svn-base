package cn.com.jandar.action.manage.ruku;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import cn.com.jandar.action.admin.AdminBaseController;
import cn.com.jandar.kit.Constant;
import cn.com.jandar.kit.DbUtil;
import cn.com.jandar.model.Produce;
import cn.com.jandar.model.ProduceDetail;
import cn.com.jandar.model.ProduceDetailDraft;

import com.jfinal.plugin.activerecord.CPI;
import com.jfinal.plugin.activerecord.Page;

import cty.kit.route.ControllerBind;

@ControllerBind(controllerKey = "/manage/ruku/ykd", resource = "移库单")
public class YkdController extends AdminBaseController {
	public final static Map<String, String> produceCG = new LinkedHashMap<String, String>();

	public void index() {
		// 草稿初始化
		String type="006";  //单据类型
		List<Produce> produceCGList = Produce.getProduceCG(type);
		
		for (Produce produce : produceCGList) {
			String DH = DbUtil.readDbString(produce.get("DH"));
			produceCG.put("DH", DH);
		}

		Page<Produce> produceList = Produce.getProduceList(
				getParaToInt("pageNumber", 1),
				getParaToInt("pageSize", PAGESIZE),
				getPara("orderBy", "c_produce.dh"), getPara("order", "asc"));
		setAttr("page", produceList);
		render("ykd_list.html");
	}

	public void query() {
		// 得到单号
		String dh = this.getPara(0);
	}

	// 根据单据类型查找该类型单据最大的单据号
	public void add() {
		setAttr("produce",
				new Produce().set("DH", Constant.findb_goods_dh("006")).set(
						"SBZT", "006"));
		setAttr("SBZT", "移库单");
		setAttr("produceDetail", new ProduceDetail());

		render("ykd_input.html");
	}

	// 查询草稿
	public void edit() {
		String dh = this.getPara(0);
		Produce produce = Produce.getProduceByDh(dh);
		List<ProduceDetailDraft> produceDetailDraftList = ProduceDetailDraft.getProduceDetailDraftByDH(dh);
		
		setAttr("produce", produce);
		setAttr("produceDetailDraftList", produceDetailDraftList);
		
		render("produce_input.html");
	}
	
	
	public void save(){
		
		if (Produce.saveAll(this)) {
			this.setAttr("msg", "保存成功！");
			this.setAttr("redirectionUrl", "/manage/ruku/ykd");
			this.render("../../../admin/common/success.html");
		} else {
			this.setAttr("msg", "有设备选择数量过大...请检查后再保存！");
			this.setAttr("redirectionUrl", "/manage/ruku/ykd");
			this.render("../../../admin/common/error.html");
		}

	}

	//明细从单据中得到信息
	private void getAttrFromProduce(Produce produce, int i) { 
        if(i == 0){
        	ProduceDetailDraft produceDetailDraft = new ProduceDetailDraft();
        	produceDetailDraft.setAttrs(CPI.getAttrs(produce));
        	//另外的setter补充
        	produceDetailDraft.set("num", 1);
        	produceDetailDraft.set("CHNUM", -1);
        }else{
        	ProduceDetail produceDetail = new ProduceDetail();
        	produceDetail.setAttrs(CPI.getAttrs(produce));
        	//另外的setter补充
        	produceDetail.set("num", 1);
        	produceDetail.set("CHNUM", -1);
        }	
	}

	public void update() {

	}

	// 作废
	public void stop() {

	}

}
